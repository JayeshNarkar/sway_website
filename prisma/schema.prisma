// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  isAdmin  Boolean  @default(false)
  views      View[]     
  purchases Purchase[]    
  addresses Address[]
  contact Contact[]
}

model Size {
  id           Int      @id @default(autoincrement())
  name         String   
  priceAdjustment Int    @default(0) 
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   Int
  stock        ProductStock[]
  purchases Purchase[]
}

model Category {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  sizes    Size[]   
  products Product[]  
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String
  originalPrice Int @default(-1)
  price        Int
  categoryName   String
  createdAt    DateTime @default(now())
  category     Category @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  images       Image[]@relation("ProductImages")
  views        View[]
  purchases    Purchase[]
  stock        ProductStock[]
}

model ProductStock {
  id        Int      @id @default(autoincrement())
  productId Int
  sizeId    Int
  inStock   Boolean  @default(true)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@unique([productId, sizeId]) 
}

model View {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int?     
  identifier  String?
  viewedAt  DateTime @default(now())
  count     Int      @default(1)

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId, identifier])
}

model Image {
  id          Int      @id @default(autoincrement())
  url         String
  bgRemoval Boolean @default(false)
  
  productId   Int?
  bannerId    Int?

  product     Product? @relation("ProductImages", fields: [productId], references: [id], onDelete: Cascade)
  banner      Banner?  @relation("BannerImage")
}

model Banner {
  id       Int      @id @default(autoincrement())
  url      String
  imageId  Int      @unique
  image    Image    @relation("BannerImage", fields: [imageId], references: [id], onDelete: Cascade)
}

model Contact{
  id Int @id @default(autoincrement())
  
  number String

  userId Int 
  purchases Purchase[]
  user        User    @relation(fields: [userId], references: [id])
}

model Purchase {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  sizeId Int
  addressId Int
  contactId Int

  totalPrice Int 

  status PurchaseStatus @default(pending)
  paymentMethod PaymentMethod @default(upi)

  purchasedAt DateTime @default(now())
  
  contact Contact @relation(fields: [contactId], references: [id] )
  address Address @relation(fields: [addressId], references: [id] )
  size Size @relation(fields: [sizeId], references: [id])
  user        User    @relation(fields: [userId], references: [id])
  product     Product @relation(fields: [productId], references: [id])
}

enum PurchaseStatus {
  pending
  completed
  delivered
  cancelled
  failed
}

enum PaymentMethod {
  upi
  cod
}

model Address {
  id Int @id @default(autoincrement())
  userId Int
  flatAndBuilding String
  street String
  pincode String
  city String
  state String
  country String
  
  purchase Purchase[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}